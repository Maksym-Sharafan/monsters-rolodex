{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","monster","id","name","email","className","src","alt","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","e","setState","target","value","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAaeA,EAVF,SAACC,GACX,MAAwBA,EAAMC,QAAvBC,EAAP,EAAOA,GAAIC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,MAEjB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAG,+BAA0BJ,EAA1B,0BAAsDK,IAAI,YACjE,6BAAMJ,IACN,4BAAIC,QCIGI,G,MATG,SAAAR,GAEd,OAAO,qBAAKK,UAAU,YAAf,SACFL,EAAMS,SAASC,KAAI,SAAAT,GAChB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCKvBS,G,MATG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACd,uBACER,UAAU,SACVS,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCJVG,E,4MACJC,MAAM,CACJR,SAAS,GACTS,YAAY,I,EAGdL,aAAe,SAACM,GACd,EAAKC,SAAS,CAACF,YAAYC,EAAEE,OAAOC,S,uDAGtC,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAK,OAAE,EAAKP,SAAS,CAACX,SAASkB,S,oBAGxC,WACE,MAA8BC,KAAKX,MAA5BC,EAAP,EAAOA,YACDW,EADN,EAAoBpB,SACcqB,QAAO,SAAA7B,GAAO,OAC5CA,EAAQE,KAAK4B,cAAcC,SAASd,EAAYa,kBAGrD,OACE,sBAAK1B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEO,YAAY,iBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BRI,aAmCHjB,IC5BAkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c79131fb.chunk.js","sourcesContent":["\r\nimport './card.style.css';\r\n\r\nconst Card = (props)=>{\r\n   const {id, name, email}=props.monster;\r\n\r\n   return <div className='card-container' >\r\n       <img src={`https://robohash.org/${id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n        <h2 >{name}</h2>\r\n        <p>{email}</p>\r\n    </div>\r\n}\r\n\r\nexport default Card;","\r\nimport Card from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n const CardList = props =>{\r\n    \r\n    return <div className='card-list'>\r\n        {props.monsters.map(monster=>{\r\n            return <Card key={monster.id} monster={monster} />\r\n        })}\r\n    </div>\r\n}\r\n\r\nexport default CardList;","\r\n\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({placeholder, handleChange})=>(\r\n    <input \r\n      className='search'\r\n      type=\"search\" \r\n      placeholder={placeholder}\r\n      onChange={handleChange} \r\n      />\r\n);\r\n\r\nexport default SearchBox;","import { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component {\n  state={\n    monsters:[],\n    searchField:''\n  };\n\n  handleChange = (e) => {\n    this.setState({searchField:e.target.value})\n  };\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res=>res.json())\n    .then(users=>this.setState({monsters:users}))\n  }\n\n render(){\n   const {searchField, monsters}=this.state;\n   const filteredMonsters = monsters.filter(monster=>\n       monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n   \n  return (\n    <div className=\"App\">\n      <h1>Monsters-rolodex</h1>\n      <SearchBox \n        placeholder=\"search monster\"\n        handleChange={this.handleChange}\n      />\n      <CardList monsters={filteredMonsters}/>\n    </div>\n  );\n }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}